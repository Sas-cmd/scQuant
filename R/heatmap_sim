library(pbapply)
library(dplyr)
library(progress)
library(data.table)
library(ggplot2)
library(pROC)
library(BiocParallel)

setwd("/QRISdata/Q4862/scQuant/heatmap/data/New_Sim")
set.seed(2353535)
#Functions####
scQuant = function(geneMat = geneMat, celltype = celltype, 
                   zeroPerc = zeroPerc, QuantNo =  QuantNo,
                   method = c("SG", "SV", "DS", "std")){
    
    
    message("Removing cell types that with fewer than 50 cells")
    
    CT = as.data.frame(table(celltype))
    
    CT = CT[CT$Freq >= 50 ,]
    
    celltype = as.character(celltype)
    celltype = celltype[celltype %in% CT$celltype]
    
    message("Subsetting data by Cell Type")
    geneMat_list = pblapply(names(table(celltype)), function(x) {
        (geneMat[, celltype == x] )
    })
    
    
    names(geneMat_list) = names(table(celltype))
    
    message("removing genes excess zeros")
    zeRM = pblapply(geneMat_list, function(x){
        RMze = x[rowMeans(x == 0) < zeroPerc ,]})
    
    
    
    message("removing outliers")
    OutRM = pblapply(zeRM, function(x){
        apply(x, 1, function(w){
            wt = RMOutlier(w, 4)
            wt = as.list(wt)
            return(wt)})
    })
    
    
    OutRM.unlist = lapply(OutRM, lapply, unlist)
    
    message("Running scQuant")
    SetOut = pblapply(OutRM.unlist, lapply, function(x){
        dt = as.data.frame(table(x))
        if(nrow(dt) == 1){
            t24 = as.data.frame(t(c(0,0,0,0)))
            colnames(t24) = c(seq(1:ncol(t24)))
            return(t24)
        }else{
            t22 = split(x, cut(x, unique(quantile(x, (0:4/4),
                                                  names = FALSE),
                                         include = TRUE)))
            t21 = as.data.frame(t(unlist(lapply(t22, NMAD))))
            colnames(t21) = c(seq(1:ncol(t21)))
            return(t21)
        }
    })
    
    Quant_out.tb = lapply(SetOut, function(x){
        list_data = as.data.frame(data.table::rbindlist(x, fill = T))
        list_data[is.na(list_data)] = 0
        list_data$genes = names(x)
        return(list_data)
    })
    
    if (method == 'std') {
        return(Quant_out.tb)
    }
    
    if (method == "SG"){
        SG = scSG (dat.list = Quant_out.tb, QuantNo = QuantNo)
        return(SG)
    }
    if (method == "SV"){
        SV = scSV(dat.list = Quant_out.tb, QuantNo = QuantNo)
        return(SV)
    }
    if (method == "DS"){
        DS = scDS(dat.list = Quant_out.tb)
        return(DS)
    }
}  

#For calculating SG genes
scSG = function (dat.list = dat.list, QuantNo = QuantNo){
    message("Performing SG calculation")
    scSGenens = pblapply(dat.list, function(v){
        gen.name = v$genes
        v$genes = NULL
        v$DG.mean = rowMeans(v[,1:QuantNo])
        v$DG.sum = rowSums(v[,1:QuantNo])
        v$genes = gen.name
        v$DG.Rank = 1 - rank(v$DG.mean)/(length(v$DG.mean) + 1)
        return(v)
    })
}

#For calculating SV genes
scSV = function (dat.list = dat.list, QuantNo = QuantNo){
    
    dtD = test %>% purrr::reduce(inner_join, by ='genes')
    rownames(dtD) = dtD$genes
    dtD$genes = NULL
    dtD1 = dtD[rowMeans(dtD == 0) <= 0.5 ,]
    colnames(dtD1) = NULL
    scSV_split = apply(dtD1, 1 , function(x){
        scSV_split = as.data.frame(split(x, ceiling(seq_along(x) / QuantNo)))
    })
    message("Perfoming SV")
    SV.l = pblapply(scSV_split, function(d){
        xw= t(d)
        d1 = philentropy::distance(xw, 
                                   method = "euclidean", mute.message = T)
        d1[lower.tri(d1)] = NA
        SV.d = mean(d1, na.rm = TRUE)
        return(SV.d)
    })
    SV = as.data.frame(t(rbindlist(list(SV.l))))
    colnames(SV) = "SV.values"
    SV$Rank = 1 - rank(SV$SV.values)/(length(SV$SV.values) + 1)
    return(SV)
}
scDS = function(dat.list = dat.list){
    SetUni = lapply(dat.list, function(unidat){
        genenames = unidat$genes
        unidat$genes = NULL
        vars = combn(colnames(unidat), 2)
        vars = cbind(vars, vars[2:1,])
        done = sapply(seq_len(ncol(vars)), 
                      function(x) unidat[, vars[1, x]] / unidat[, vars[2, x]])
        
        done = abs(1 - done)
        done[!is.finite(done)] = 0
        done = as.data.frame(done)
        
        colnames(done) = paste(vars[1, ], vars[2, ], sep="/")
        done$genes = genenames
        return(done)
    })
    
    
    vars2 = combn(names(SetUni), 2)
    
    
    pb <- progress_bar$new(format = "(:spin) [:bar] :percent [Elapsed time: :elapsedfull || Estimated time remaining: :eta]",
                           total = ncol(vars2),
                           complete = "+",   
                           incomplete = "_", 
                           current = "+",    
                           clear = FALSE,    
                           width = 100)     
    
    DSout = data.frame()
    message("Performing DS")
    for(i in 1:ncol(vars2)){
        pb$tick()
        t1 = SetUni[[vars2[1, i]]]
        t2 = SetUni[[vars2[2, i]]]
        t3 = merge(t1, t2, by = "genes", all.x = TRUE)
        rownames(t3) = t3$genes
        t3$genes = NULL
        t3 = t3[complete.cases(t3), ]
        t3_split = apply(t3, 1 , function(x){
            t3_split = as.data.frame(split(x, ceiling(seq_along(x) / (ncol(t1)-1))))
        })
        
        y3 = lapply(t3_split, function(w){
            w1 = wilcox.test(w$X1, w$X2,  
                             paired = TRUE, exact = FALSE)$p.value
        })
        
        y3 = t(as.data.frame(y3))
        colnames(y3) = "p.value"
        y3 = as.data.frame(y3)
        y3[is.nan(y3$p.value),] <- 1
        y3$celltype.1 = vars2[1,i]
        y3$celltype.2 = vars2[2, i]
        y3$genes = rownames(y3)
        rownames(y3) = NULL
        DSout = rbindlist(list(DSout, y3))
        
        
    }
    
    DSout$p.adj = p.adjust(DSout$p.value, method = "BH")
    DSout = DSout[complete.cases(DSout), ]
    
    return(DSout)
}

OldscSG = function(dat.list, QuantNo){
    xt = scSG(dat.list, QuantNo)
    
    ntsel = lapply(xt, function(x){
        sel = x %>% dplyr::select(DG.Rank, genes)
    })
    
    nmegre = Reduce(function(...) merge(..., all = TRUE, by="genes"), ntsel)
    nmegre$diff = nmegre$DG.Rank.x - nmegre$DG.Rank.y
    
    nmegre2 = nmegre %>% top_n(100, diff)
}

#NMAD
NMAD = function(x) {
    mad(x[x!= 0])/mean(x[x!= 0])}

RMOutlier = function(x, Std){
    x2 = x
    x1 = as.vector(x2[!is.na(x2)])
    w2 = as.vector(x2[is.na(x2)])
    m <- median(x1)
    if (m == 0) {
        x2[is.na(x2)] = 0
        return(x2)
    }else if (m == as.numeric(names(which.max(table(x2))))){
        x2[is.na(x2)] = 0
        return(x2)
    }else{
        deviations <- abs(x1 - m)
        lowerMAD <- 1.4826 * median(deviations[x1 <= m])
        upperMAD <- 1.4826 * median(deviations[x1 >= m])
        
        xt = (x1[x1 >= m - Std * lowerMAD & x1 <= m + Std* upperMAD])
        xt1 = c(xt, w2)
        xt1[is.na(xt1)] = 0
        return(xt)}
}


rbinFunc = function(n, mu1, sig1, min, max, flag) {
    y0 = rnegbin(n, mu1, theta = mu1^2/(sig1^2 - mu1))
    y1 = runif(n, min = min, max = max)
    y = y0*(1 - flag) + y1*flag 
}
run.edgeR<-function(datarow){
    
    group = colnames(datarow)
    dgelist=edgeR::DGEList(counts = datarow, group = group)
    ### TMM method
    dgelist_norm <- try(edgeR::calcNormFactors(dgelist, method = 'TMM'),silent=T)
    design=stats::model.matrix(~group)
    dge <- edgeR::estimateDisp(dgelist_norm, design, robust = F) #dispersion not robust
    fit <- edgeR::glmFit(dge, design, robust = F)     #fit
    lrt <- edgeR::glmLRT(fit)   #test
    x = ifelse(lrt$table$PValue < 0.05, 1, 0)
    
    y = as.numeric(grepl('_DS_', tp$genes, ignore.case=T))
    au = auc(y, x)
    return(au)
}

####main####
ratio = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)

for(i in 1:length(ratio)){
    flag = rbinom(250, size = 1,  prob = ratio[i])
    
    t2 = as.data.frame(do.call(rbind, lapply(1:10000, function(x){
        xt = t(data.frame( v1 = rnegbin(250, mu = 600, 
                                        theta = 600^2/(320^2 - 600))
        ))
    })))
    
    rownames(t2) = paste0("gene", 1:nrow(t2))
    colnames(t2) = rep("cellA", ncol(t2))
    
    t4 = t2
    
    t3 = as.data.frame(do.call(rbind, lapply(1:2000, function(x){
        xt = t(data.frame(
            v1 = rbinFunc(n = 250, mu1 = 600, sig1 = 320, 
                          min = 5, max = 3000, flag  ))
        )})))
    
    subsam = t3[sample(nrow(t3), 200), ]
    
    rownames(t2)[9801:10000] = paste0("gene", "_DS_", 1:nrow(subsam))
   
    t4[9801:10000,] = subsam
    
    rownames(t4)[9801:10000] = paste0("gene", "_DS_", 1:nrow(subsam))
    
    colnames(t4) = rep("cellB", ncol(t4))

    tttx = cbind(t2, t4)
    savename = paste0(ratio[i]*100, "_", "DS_Sim_ratio", ".rds")
    saveRDS(tttx, savename)
    print(i)
    print(savename)
}


# tp = reshape2::melt(tttx)
# tp$variable = as.factor(tp$variable)
# 
# table(tp$variable)
# 
# top = t(tttx[10,])
# 
# plot(density(as.numeric(tttx[10,501:1000])))
# 
# plot(density(as.numeric(tttx[10,1:500])))
# 
# xw = scQuant(geneMat = log1p(tttx), celltype = colnames(tttx), 
#              zeroPerc = 0.9,
#              QuantNo = 4, method = "DS")

setwd("/QRISdata/Q4862/scQuant/heatmap/data/New_Sim")
lsfiles = list.files()
allf = lapply(lsfiles, readRDS)

newname = sub(pattern = "(.*)\\..*$", replacement = "\\1", basename(lsfiles))

names(allf) = newname

zeo = c(0, 0.02, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.5)

for(i in 1:length(zeo)){
    for(j in 1:length(allf)){
        t0 = as.data.frame(t(apply(allf[[j]], 1, function(y) 
            replace(y, sample(length(y), zeo[i]*length(y)), 0))))
        namenew = paste0(zeo[i]*100, "_", newname[j], "_zero", ".rds")
        saveRDS(t0, namenew)
        print(j)
        print(i)
        print(namenew)
    }
}


sub(".rds","", namenew)

####Specific change####
setwd("P:/scQuant/heatmap/data/DS_ratio_0.9")
ls = list.files()
lsr = lapply(ls, readRDS)
setwd("P:/scQuant/heatmap/data/Final/")
saveRDS(lsr, "DS_ratio_0.9.rds")

setwd("P:/scQuant/heatmap/data/DS_ratio_0.8")
ls = list.files()
lsr = lapply(ls, readRDS)
setwd("P:/scQuant/heatmap/data/Final/")
saveRDS(lsr, "DS_ratio_0.8.rds")

setwd("P:/scQuant/heatmap/data/DS_ratio_0.7")
ls = list.files()
lsr = lapply(ls, readRDS)
setwd("P:/scQuant/heatmap/data/Final/")
saveRDS(lsr, "DS_ratio_0.7.rds")

setwd("P:/scQuant/heatmap/data/DS_ratio_0.6")
ls = list.files()
lsr = lapply(ls, readRDS)
setwd("P:/scQuant/heatmap/data/Final/")
saveRDS(lsr, "DS_ratio_0.6.rds")

setwd("P:/scQuant/heatmap/data/DS_ratio_0.5")
ls = list.files()
lsr = lapply(ls, readRDS)
setwd("P:/scQuant/heatmap/data/Final/")
saveRDS(lsr, "DS_ratio_0.5.rds")

setwd("P:/scQuant/heatmap/data/DS_ratio_0.4")
ls = list.files()
lsr = lapply(ls, readRDS)
setwd("P:/scQuant/heatmap/data/Final/")
saveRDS(lsr, "DS_ratio_0.4.rds")

setwd("P:/scQuant/heatmap/data/DS_ratio_0.3")
ls = list.files()
lsr = lapply(ls, readRDS)
setwd("P:/scQuant/heatmap/data/Final/")
saveRDS(lsr, "DS_ratio_0.3.rds")

setwd("P:/scQuant/heatmap/data/DS_ratio_0.2")
ls = list.files()
lsr = lapply(ls, readRDS)
setwd("P:/scQuant/heatmap/data/Final/")
saveRDS(lsr, "DS_ratio_0.2.rds")

setwd("P:/scQuant/heatmap/data/DS_ratio_0.1")
ls = list.files()
lsr = lapply(ls, readRDS)
setwd("P:/scQuant/heatmap/data/Final/")
saveRDS(lsr, "DS_ratio_0.1.rds")

####Running scQuant_DS####

setwd("/QRISdata/Q4862/scQuant/heatmap/data/New_Sim/Fin")
fnames = list.files()
ls = lapply(fnames, readRDS)
# 
# i = 10
# 
# 
# xw = scQuant(geneMat = log1p(ls[[i]]), 
#              celltype = colnames(ls[[i]]), zeroPerc = 0.9, 
#              QuantNo = 4, method = "std")
# 
# 
scDS = function(dat.list = dat.list){
    SetUni = lapply(xw, function(unidat){
        genenames = unidat$genes
        unidat$genes = NULL
        vars = combn(colnames(unidat), 2)
        vars = cbind(vars, vars[2:1,])
        done = sapply(seq_len(ncol(vars)),
                      function(x) unidat[, vars[1, x]] / unidat[, vars[2, x]])

        done = abs(1 - done)
        done[!is.finite(done)] = 0
        done = as.data.frame(done)

        colnames(done) = paste(vars[1, ], vars[2, ], sep="/")
        done$genes = genenames
        return(done)
    })


    vars2 = combn(names(SetUni), 2)


    pb = progress_bar$new(format = "(:spin) [:bar] :percent [Elapsed time: :elapsedfull || Estimated time remaining: :eta]",
                           total = ncol(vars2),
                           complete = "+",
                           incomplete = "_",
                           current = "+",
                           clear = FALSE,
                           width = 100)

    DSout = data.frame()
    message("Performing DS")
    for(i in 1:ncol(vars2)){
        pb$tick()
        t1 = SetUni[[vars2[1, i]]]
        t2 = SetUni[[vars2[2, i]]]
        t3 = merge(t1, t2, by = "genes", all.x = TRUE)
        rownames(t3) = t3$genes
        t3$genes = NULL
        t3 = t3[complete.cases(t3), ]
        t3_split = apply(t3, 1 , function(x){
            t3_split = as.data.frame(split(x, ceiling(seq_along(x) / (ncol(t1)-1))))
        })

        y3 = lapply(t3_split, function(w){
            w1 = wilcox.test(w$X1, w$X2,
                             paired = TRUE, exact = FALSE)$p.value
        })

        y3 = t(as.data.frame(y3))
        colnames(y3) = "p.value"
        y3 = as.data.frame(y3)
        y3[is.nan(y3$p.value),] <- 1
        y3$celltype.1 = vars2[1,i]
        y3$celltype.2 = vars2[2, i]
        y3$genes = rownames(y3)
        rownames(y3) = NULL
        DSout = rbindlist(list(DSout, y3))


    }

    DSout$p.adj = p.adjust(DSout$p.value, method = "BH")
    DSout = DSout[complete.cases(DSout), ]

    return(DSout)
}
# 
# 
# t2 = ifelse(DSout$p.value < 0.05, 1, 0)
# 
# y = as.numeric(grepl('_DS_', DSout$genes, ignore.case=T))
# 
# auc(y, t2)


fnames[11]

datarow = ls1[[1]]


run.scQuant = function(datarow){
    xw = scQuant(geneMat = datarow, 
             celltype = colnames(datarow), zeroPerc = 0.9, 
        QuantNo = 4, method = "std")
    
    xw1 = scDS(xw)
    t2 = ifelse(xw$p.value < 0.5, 1, 0)
    
    y = as.numeric(grepl('_DS_', xw$genes), ignore.case=T)
    
    au = auc(y, t2)
    return(au)
}

param = SnowParam()

ls1 = ls[11:15]

scQuant.res = lapply(ls1, run.scQuant)

names(scQuant.res) = fnames

saveRDS(allau, "/QRISdata/Q4862/scQuant/heatmap/scQuantDS_res.rds")
###Running edgeR####
library(data.table)
library(BiocParallel)
library(pROC)

run.edgeR = function(datarow){

    group = colnames(datarow)
    dgelist=edgeR::DGEList(counts = datarow, group = group)
    ### TMM method
    dgelist_norm =try(
        edgeR::calcNormFactors(dgelist, method = 'TMM'),silent=T)
    design=stats::model.matrix(~group)
    dge = edgeR::estimateDisp(dgelist_norm, design, robust = F) #dispersion not robust
    fit = edgeR::glmFit(dge, design, robust = F)     #fit
    lrt = edgeR::glmLRT(fit)   #test
    x = ifelse(lrt$table$PValue < 0.05, 1, 0)

    y = as.numeric(grepl('_DS_', rownames(datarow), ignore.case=T))
    au = pROC::auc(y, x)
    return(au)
}

setwd("/QRISdata/Q4862/scQuant/heatmap/data/New_Sim/Fin")

fnames = list.files()
ls = lapply(fnames, readRDS)

param = MulticoreParam(workers = 10)

edge_res = bplapply(ls, run.edgeR, BPPARAM = param)

newnames = sub(".rds","", fnames)
names(edge_res) = newnames

saveRDS(edge_res, "/QRISdata/Q4862/scQuant/heatmap/edgeR_res.rds")

library(SingleCellExperiment)
###Running scDD####

run.scDD<-function(datarow){
    
    datarow = datarow
    group = colnames(datarow)
    
    names(group)=colnames(datarow)
    condition=group
    idx=which(colSums(datarow)==0)
    if(length(idx)!=0){
        datarow=datarow[,-idx]
        condition=condition[-idx]
    }
    sce=SingleCellExperiment::SingleCellExperiment(assays=list(
        counts=datarow),colData=data.frame(condition))
    
    scDatEx.scran <- scDD::preprocess(sce, zero.thresh=1.0, scran_norm=TRUE)
    
    prior_param=list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)
    scDatExSim <- scDD::scDD(scDatEx.scran, 
                             prior_param=prior_param, 
                             categorize = F,testZeroes=FALSE)
    
    res_scDD=scDD::results(scDatExSim)
    x = ifelse(res_scDD$nonzero.pvalue.adj < 0.05, 1, 0)
    
    rname = rownames(sce)
    rname = substr(rname, start = 1, stop = 2)
    y = as.numeric(grepl('_DS_', rownames(datarow), ignore.case=T))
    au = auc(y, x)
    return(au)
}

setwd("P:/scQuant/heatmap/data/New_Sim/Fin")

fnames = list.files()
ls = lapply(fnames, readRDS)

param = MulticoreParam(workers = 10)

run.scDD(t1)

scDD_res = lapply(ls, run.scDD)

newnames = sub(".rds","", fnames)
names(scDD_res) = newnames


saveRDS(scDD_res, "P:/scQuant/heatmap/scDD_res.rds")
#running edgeR

# setwd("/QRISdata/Q4862/scQuant/heatmap/data")
# 
# 
# fnames = list.files()
# tpx = run.edgeR(ls.file[[1]])
# 
# edgeR_out = list()
# for(i in 1:length(fnames)){
#     ls = lapply(fnames, function(x)readRDS(x))
#     edge_res = bplapply(ls, run.edgeR, BPPARAM = param)
#     t1 = as.data.frame(rbindlist(list(edge_res)))
#     t1[,8] = sub(".rds","", fnames[i])
#     edgeR_out = rbindlist(list(edgeR_out, t1))
# }
# 
# saveRDS(edgeR_out,
#         "/QRISdata/Q4862/scQuant/heatmap/edgeR_res.rds")
# 
# run.edgeR(ls[[i]])
# 
# DS_Sim_ratio_0.1 <- readRDS("P:/scQuant/heatmap/data/DS_Sim_ratio_0.1.rds")
# 
# 
# 
# 
# 
# tp = scQuant(geneMat = DS_Sim_ratio_0.1, 
#              celltype = colnames(DS_Sim_ratio_0.1), zeroPerc = 0.9,
#              QuantNo = 4, method = "DS")
# 
# x = ifelse(tp$p.value < 0.05, 1, 0)
# 
# 
# y = as.numeric(grepl('_DS_', tp$genes, ignore.case=T))
# 
# au = pROC::auc(y, x)
# 
# 
# t2 = run.edgeR(datarow = DS_Sim_ratio_0.1)
# 
# t0 = as.data.frame(apply(DS_Sim_ratio_0.1, 1, function(x) 
#     replace(x, sample(length(x), zero[j]*length(x)), 0)))
# 
# 
# 
# 
# 
# 
# tp = scQuant(geneMat = tttx, celltype = colnames(tttx), zeroPerc = 0.9,
#              QuantNo = 4, method = "DS")
# 
# 
# table(tp$p.value < 0.05)
# 
# x = ifelse(tp$p.value < 0.05, 1, 0)
# 
# if(tp$genes )
#     y = as.numeric(grepl('_DS_', tp$genes, ignore.case=T))
# 
# au = pROC::auc(y, x)
# 
# 
# t1 = scQuant(geneMat = tx , celltype = colnames(tx), zeroPerc = 0.9,
#         QuantNo = 4, method = "std")
# 
# 
# OldscSG = function(dat.list, QuantNo){
#     xt = scSG(dat.list, QuantNo)
#     
#     ntsel = lapply(xt, function(x){
#         sel = x %>% dplyr::select(DG.Rank, genes)
#     })
#     
#     nmegre = Reduce(function(...) merge(..., all = TRUE, by="genes"), ntsel)
#     nmegre$diff = nmegre$DG.Rank.x - nmegre$DG.Rank.y
#     
#     nmegre2 = nmegre %>% top_n(100, diff)
# }
# 
# setwd("/QRISdata/Q4862/scQuant/heatmap/data/DS_ratio_0.1")
# 
# fnames = list.files()
# 
# 
# edgeR_out = list()
# for(i in 1:length(fnames)){
#     ls = lapply(fnames, function(x)readRDS(x))
#     edge_res = future.apply::future_lapply(ls, run.edgeR)
#     t1 = as.data.frame(rbindlist(list(edge_res)))
#     t1[,8] = sub(".rds","", fnames[i])
#     edgeR_out = rbindlist(list(edgeR_out, t1))
# }
# 
# 
# setwd("P:/scQuant/heatmap/data/DS_ratio_0.1")
# 
# fnames = list.files()
# ls.file = lapply(fnames, readRDS)
# 
# datarow = ls.file[[i]]
# 
# 
####Running wilcox####
library(pROC)
run.wilcox_test<-function(datarow){
    
    group = colnames(datarow)
    
    idx2=which(group==unique(group)[2])
    wilcoxtestfun<-function(x){
        tx<-x[idx2]
        ty<-x[-idx2]
        result<-stats::wilcox.test(tx,ty)
        return(result)
    }
    logdata=log1p(datarow)
    results = apply(logdata, 1, wilcoxtestfun)
    t2 = as.data.frame(
        t(as.data.frame(lapply(results, function(x){x$p.value}))))
    
    t2$V2 = ifelse(t2$V1 < 0.05, 1, 0)
    
    y = as.numeric(grepl('_DS_', rownames(datarow), ignore.case=T))
    au = auc(y, t2$V2)
    return(au)
}

fnames = list.files()
ls = lapply(fnames, readRDS)

param = MulticoreParam(workers = 10)

#need to run lapply, instead of bplapply
wil_res = lapply(ls, run.wilcox_test)

newnames = sub(".rds","", fnames)
names(wil_res) = newnames

saveRDS(wil_res, "/QRISdata/Q4862/scQuant/heatmap/wil_res.rds")
####Running MAST#####

setwd("P:/scQuant/heatmap/data/New_Sim/Fin")

fnames = list.files()
ls = lapply(fnames, readRDS)

datarow = ls[[1]]
run.MAST<-function(datarow){
 
    group = colnames(datarow)
    
    logdata = log1p(datarow)
    cData = data.frame(wellKey=paste0('C',1:dim(logdata)[2]))
    fData = data.frame(primerid=rownames(logdata))
    colnames(logdata)=paste0('C',1:dim(logdata)[2])
    mat = as.matrix(logdata)
    
    sca = MAST::FromMatrix(mat, cData, fData)
    
    SummarizedExperiment::colData(sca)$cond = group
    zlmcond = try(MAST::zlm(~cond, sca, parallel = T),silent = T)
    summarycond = MAST::summary(zlmcond, doLRT='condcellB')
    summaryDt <- summarycond$datatable
    fcHurdle <- summaryDt[summaryDt$contrast=='condcellB' & summaryDt$component=='H',]#logFC coefficients
    x = ifelse(fcHurdle$`Pr(>Chisq)` < 0.05, 1, 0)
    
    y = as.numeric(grepl('_DS_', rownames(datarow), ignore.case=T))
    au = auc(y, x)
    return(au)
}

MAST_res = lapply(ls, run.MAST)

newnames = sub(".rds","", fnames)
names(MAST_res) = newnames

saveRDS(MAST_res, "/QRISdata/Q4862/scQuant/heatmap/MAST_res.rds")

saveRDS(MAST_res, "P:/scQuant/heatmap/MAST_res.rds")

####Plotting heatmaps####
plotheatMap = function(res){
    res = t(as.data.frame(res))
    res = cbind(res, rownames(res))
    res = as.data.frame(res)
    res$SIM = sub('.', '', res$V2)
    
    
    res$dat = sub("^([^_]*_[^_]*).*", "\\1", res$SIM)
    
    res$column = as.numeric( sub("\\D*(\\d+).*", "\\1", res$dat))
    
    res$row = sub('.+_(.+)', '\\1', res$dat)
    res$V1 = as.numeric(as.character(res$V1))
    
    pal <- wesanderson::wes_palette("Zissou1", 100, type = "continuous")
    g = ggplot(res, 
           aes(as.factor(row), as.factor(column))) +                
        geom_tile(aes(fill = V1)) + 
        scale_fill_gradientn(colours = pal, limits = c(0, 1)) +
        theme_minimal() +
        xlab("") + ylab("") + guides(fill = guide_colourbar(nbin = 100)) +
        labs(fill="AUC")
    return(g)
}

scQuant.res = readRDS()

plotheatMap(scQuant.res)

edgeR_res = readRDS("P:/scQuant/heatmap/edgeR_res.rds")

plotheatMap(edgeR_res)

wil_res = readRDS("P:/scQuant/heatmap/wil_res.rds")

plotheatMap(wil_res)

scDD_res = readRDS("P:/scQuant/heatmap/scDD_res.rds")

plotheatMap(scDD_res)

MAST_res = readRDS("P:/scQuant/heatmap/MAST_res.rds")

plotheatMap(MAST_res)



# ######Working####
# run.edgeR<-function(datarow){
#     
#     group = colnames(datarow)
#     dgelist=edgeR::DGEList(counts = datarow, group = group)
#     ### TMM method
#     dgelist_norm <- try(edgeR::calcNormFactors(dgelist, method = 'TMM'),silent=T)
#     design=stats::model.matrix(~group)
#     dge <- edgeR::estimateDisp(dgelist_norm, design, robust = F) #dispersion not robust
#     fit <- edgeR::glmFit(dge, design, robust = F)     #fit
#     lrt <- edgeR::glmLRT(fit)   #test
#     x = ifelse(lrt$table$PValue < 0.05, 1, 0)
#     
#     y = as.numeric(grepl('_DS_', rownames(datarow), ignore.case=T))
#     au = pROC::auc(y, x)
#     return(au)
# }
# 
# setwd("P:/scQuant/heatmap/data/DS_ratio_0.1")
# 
# fnames = list.files()
# ls.file = lapply(fnames, readRDS)
# 
# edgeR_out = list()
# for(i in 1:length(ls.file)){
#     
#     y4 = ls.file[[i]]
#     
#     group = colnames(ls.file[[i]])
#     dgelist=edgeR::DGEList(counts = ls.file[[i]], group = group)
#     dgelist_norm <- try(
#         edgeR::calcNormFactors(dgelist, method = 'TMM'),silent=T)
#     design=stats::model.matrix(~group)
#     dge = edgeR::estimateDisp(dgelist_norm, design, robust = T)
#     fit = edgeR::glmFit(dge, design, robust = F)     #fit
#     lrt = edgeR::glmLRT(fit)   #test
#     x = ifelse(lrt$table$PValue < 0.05, 1, 0)
#     y = as.numeric(grepl('_DS_', rownames(ls.file[[i]]), ignore.case=T))
#     au = pROC::auc(y, x)
#     t1 = as.data.frame(au)
#     t1$file = sub(".rds","", fnames[i])
#     edgeR_out = rbindlist(list(edgeR_out, t1))
#     print(i)
# }
# 
# gsub('.*-([0-9]+).*','\\1', "DS_Sim_ratio_0.1")
# 
# future.apply::future_lapply(ls.file, run.edgeR)
# 
# 
# filenames <- list.files("P:/scQuant/heatmap/data", recursive=TRUE)
